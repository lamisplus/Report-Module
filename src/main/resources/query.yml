query:
  index-query-name: index_elicitation
  index-query:  SELECT boui.code as "Facility Id (Datim)", state.name AS "State", lga.name AS "LGA", facility.name AS "Facility", hc.client_code AS "Client Code",
    pp.uuid AS "Patient Id",
    hc.uuid AS "Index HTS Uuid",
    (CASE WHEN hc.test1->>'result' ILIKE 'Yes' THEN 'Positive' ELSE 'Negative' END) AS "HIV Status of Index",
    hc.index_notification_services_elicitation ->> 'OfferedIns' AS "Offered INS",
    hc.index_notification_services_elicitation ->> 'AcceptedIns' AS "Accepted INS",
    hc.client_code AS "Index Code",
    hie.first_name AS "First Name",
    hie.last_name AS "Last Name",
    hie.middle_name AS "Middle Name",
    hie.phone_number AS "Phone Number",
    hie.dob AS "Date of Birth",
    se.display AS "Sex",
    hie.address AS "Address",
    noti_method.display AS "Notification Method",
    sexually_un.display AS "Sexually uncomfortable",
    CASE WHEN hie.currently_live_with_partner  IS TRUE THEN 'Yes' ELSE 'No' END AS "Currently living with partner",
    relationship.display AS "Relationship with index client",
    hie.date_partner_came_for_testing AS "Date Partner Came For Testing"
    FROM hts_client hc
    LEFT JOIN patient_person pp ON pp.uuid=hc.person_uuid
    INNER JOIN hts_index_elicitation hie ON hie.hts_client_uuid = hc.uuid
    LEFT JOIN base_application_codeset se ON se.id=hie.sex
    LEFT JOIN base_application_codeset noti_method ON noti_method.id=hie.notification_method
    LEFT JOIN base_application_codeset sexually_un ON sexually_un.id=hie.sexually_uncomfortable
    LEFT JOIN base_application_codeset relationship ON relationship.id=hie.relationship_with_index_client
    LEFT JOIN base_organisation_unit facility ON facility.id=hc.facility_id
    LEFT JOIN base_organisation_unit state ON state.id=facility.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit lga ON lga.id=state.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit_identifier boui ON boui.organisation_unit_id=hc.facility_id AND boui.name='DATIM_ID'
    WHERE hc.archived=0 AND hc.facility_id=%d AND
    hc.date_visit BETWEEN CAST('%s' AS DATE)
    AND CAST('%s' AS DATE)
  biometric-query-name: biometric
  biometric-query:  SELECT result.state AS "State", result.lga AS "LGA", result.facility AS "Facility",
    result.uuid AS "Patient ID", result.hospitalNumber AS "Hospital Number",
    base.enrollment_date AS "Date Base Biometrics Enrolled (yyyy-mm-dd)",
    base.count AS "Number of Base Fingerprint Captured",
    first_recapture.enrollment_date AS "Date of 1st Biometric Recapture",
    first_recapture.count AS "Number of 1st Biometric Recaptured Fingerprints",
    second_recapture.enrollment_date AS "Date of 2nd Biometric Recapture",
    second_recapture.count AS "Number of 2nd Recapture Fingerprints Captured",
    (CASE WHEN second_recapture.replace_date IS NOT NULL THEN second_recapture.replace_date
    WHEN first_recapture.replace_date IS NOT NULL THEN first_recapture.replace_date
    WHEN base.replace_date IS NOT NULL THEN base.replace_date
    ELSE NULL END) AS "Date Base Fingerprint Replaced"
    FROM
    ( SELECT pp.hospital_number AS hospitalNumber, pp.facility_id,
    pp.uuid, facility.name AS facility, state.name AS state, lga.name AS lga
    FROM patient_person pp
    INNER JOIN hiv_enrollment he ON he.person_uuid=pp.uuid AND he.archived=0
    LEFT JOIN base_organisation_unit facility ON facility.id=pp.facility_id
    LEFT JOIN base_organisation_unit state ON state.id=facility.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit lga ON lga.id=state.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit_identifier boui ON boui.organisation_unit_id=pp.facility_id
    AND boui.name='DATIM_ID'
    WHERE pp.archived=0
    AND pp.facility_id=%d
    AND pp.date_of_registration BETWEEN CAST('%s' AS DATE) AND CAST('%s' AS DATE)
    ) AS result
    LEFT JOIN (
    SELECT
    person_uuid,
    MAX(enrollment_date) enrollment_date, replace_date,
    count
    FROM
    biometric
    WHERE
    recapture = 0
    AND archived=0
    AND count is not null
    AND enrollment_date is not null
    AND version_iso_20 IS TRUE
    GROUP BY person_uuid, count, replace_date
    ) base ON result.uuid = base.person_uuid
    LEFT JOIN (
    SELECT
    person_uuid,
    MAX(enrollment_date) enrollment_date, replace_date,
    count
    FROM
    biometric
    WHERE
    recapture = 1
    AND archived=0
    AND count is not null
    AND enrollment_date is not null
    AND version_iso_20 IS TRUE
    GROUP BY person_uuid, count, replace_date
    ) AS first_recapture ON result.uuid = first_recapture.person_uuid
    LEFT JOIN (
    SELECT
    person_uuid,
    MAX(enrollment_date) enrollment_date, replace_date,
    count
    FROM
    biometric
    WHERE
    recapture = 2
    AND archived=0
    AND count is not null
    AND enrollment_date is not null
    AND version_iso_20 IS TRUE
    GROUP BY person_uuid, count, replace_date
    ) AS second_recapture ON result.uuid = second_recapture.person_uuid
  pmtct-hts-query-name: pmtct-hts
  pmtct-hts-query:  select pmtct.state as "State", pmtct.lga as "LGA", pmtct.facilityName AS "Facility",
    pmtct.uuid AS "Patient ID", pmtct.anc_no AS "ANC number", pmtct.hospitalnumber AS "Mother''s Hospital Num",
    pmtct.dateofbirth AS "Mother''s Date of Birth", pmtct.maritalstatus AS "Marital Status",
    pmtct.anc_setting_anc AS "ANC Setting ( Facility,Community)",
    pmtct.first_anc_date AS "Date of Index ANC Registration", pmtct.lmp AS "LMP Date",
    pmtct.gaweeks_anc AS "Gestational Age (Weeks) @ First ANC visit", pmtct.gravida_anc AS "Gravida",
    pmtct.parity_anc AS "Parity", pmtct.entry_point AS "Point of entry",
    pmtct.hbstatus_delivery as "Hepatitis B Test Result",
    pmtct.tested_syphilis_anc AS "Date tested for Sypillis",
    pmtct.test_result_syphilis_anc AS "Syphillis Test Result", pmtct.acceptedHIVTesting,
    pmtct.dateTestedHivPositive AS "Date tested for HIV", pmtct.hivTestResult AS "HIV Test result",
    pmtct.hivRestested AS "Testing date", pmtct.hiv_status AS "Result",
    pmtct.hivenrollmentDate AS "Mother''s ART Start Date", pmtct.date_of_registration AS "PCV/HB @ANC registration"
    from (
    SELECT DISTINCT ON (p.uuid)p.uuid AS PersonUuid,
    facility_state.name as state,
    facility_lga.name as lga,
    facility.name as facilityName,
    p.uuid,
    p.id,
    anc.anc_no,
    p.hospital_number as hospitalNumber,
    p.date_of_birth as dateOfBirth,
    EXTRACT(YEAR from AGE(NOW(),  date_of_birth)) as age,
    p.marital_status->>'display' as maritalStatus,
    anc.anc_setting_anc,
    anc.first_anc_date,
    pmtctenroll.lmp AS lmp,
    anc.gaweeks_anc,
    anc.gravida_anc,
    anc.parity_anc,
    pmtctenroll.entry_point,
    delivery.hbstatus_delivery,
    anc.tested_syphilis_anc,
    anc.test_result_syphilis_anc ,
    anc.syphillisStatus AS Partner_syphilis_status,
    p.date_of_registration as dateOfRegistration,
    he.date_started AS hivEnrollmentDate,
    anc.acceptHivTest AS Partner_acceptHivTest,
    anc.referredTo AS Partner_syphilis_status,
    anc.age AS Partner_age,
    he.date_of_registration,
    he.date_confirmed_hiv,
    he.date_started,
    pmtctenroll.hiv_status,
    anc.hivRestested AS hivRestested,
    anc.hivTestResult AS hivTestResult,
    anc.acceptedHIVTesting AS acceptedHIVTesting,
    anc.dateTestedHivPositive AS dateTestedHivPositive,
    anc.receivedHivRetestedResult AS receivedHivRetestedResult,
    anc.previouslyKnownHIVPositive AS previouslyKnownHIVPositive
    FROM patient_person p
    INNER JOIN (
    SELECT * FROM (SELECT p.id, CONCAT(CAST(address_object->>'city' AS VARCHAR), ' ', REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CAST(address_object->>'line' AS text), '\\\\\\\\', ''), ']', ''), '[', ''), 'null',''), '\\\\\\\', '')) AS address,
    CASE WHEN address_object->>'stateId'  ~ '^\\\\d+(\\\\.\\\\d+)?$' THEN address_object->>'stateId' ELSE null END  AS stateId,
    CASE WHEN address_object->>'district'  ~ '^\\\\d+(\\\\.\\\\d+)?$' THEN address_object->>'district' ELSE null END  AS lgaId
    FROM patient_person p,
    jsonb_array_elements(p.address-> 'address') with ordinality l(address_object)) as result
    ) r ON r.id=p.id
    LEFT JOIN (
    SELECT person_uuid AS person_uuid_anc,
    anc_setting AS anc_setting_anc,
    first_anc_date AS first_anc_date,
    gaweeks AS gaweeks_anc,
    gravida AS gravida_anc,
    parity As parity_anc,
    tested_syphilis AS tested_syphilis_anc,
    test_result_syphilis AS test_result_syphilis_anc,
    partner_information->>'age' AS age,
    partner_information->>'syphillisStatus' AS syphillisStatus,
    partner_information->>'acceptHivTest' AS acceptHivTest,
    partner_information->>'referredTo' AS referredTo,
    pmtct_hts_info->>'hivRestested' AS hivRestested,
    pmtct_hts_info->>'hivTestResult' AS hivTestResult,
    pmtct_hts_info->>'acceptedHIVTesting' AS acceptedHIVTesting,
    pmtct_hts_info->>'dateTestedHivPositive' AS dateTestedHivPositive,
    pmtct_hts_info->>'receivedHivRetestedResult' AS receivedHivRetestedResult,
    pmtct_hts_info->>'previouslyKnownHIVPositive' AS previouslyKnownHIVPositive,
    anc_no AS anc_no,
    static_hiv_status,
    MAX(created_date) AS max_created_date_anc
    FROM pmtct_anc
    GROUP BY person_uuid, anc_setting, first_anc_date, gaweeks, gravida, parity, tested_syphilis, test_result_syphilis, partner_information, anc_no, static_hiv_status,
    pmtct_hts_info
    ) AS anc ON p.uuid = anc.person_uuid_anc
    LEFT JOIN (
    SELECT person_uuid AS person_uuid_delivery,
    hbstatus AS hbstatus_delivery,
    MAX(created_date) AS max_created_date_delivery
    FROM pmtct_delivery
    GROUP BY person_uuid, hbstatus
    ) AS delivery ON p.uuid = delivery.person_uuid_delivery
    LEFT JOIN pmtct_delivery panc ON p.uuid = panc.person_uuid AND panc.created_date = delivery.max_created_date_delivery
    LEFT JOIN base_organisation_unit facility ON facility.id=p.facility_id
    LEFT JOIN base_organisation_unit facility_lga ON facility_lga.id=facility.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit facility_state ON facility_state.id=facility_lga.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit res_state ON res_state.id=CAST(r.stateid AS BIGINT)
    LEFT JOIN base_organisation_unit res_lga ON res_lga.id=CAST(r.lgaid AS BIGINT)
    LEFT JOIN base_organisation_unit_identifier boui ON boui.organisation_unit_id=p.facility_id AND boui.name='DATIM_ID'
    INNER JOIN pmtct_enrollment pmtctenroll ON pmtctenroll.person_uuid = p.uuid
    LEFT JOIN hiv_enrollment he ON he.person_uuid = p.uuid
    WHERE p.archived=0 and p.sex='Female'
    AND p.facility_id=%d AND p.date_of_registration
    BETWEEN CAST('%s' AS DATE) AND CAST('%s' AS DATE)
    ) as pmtct
  pmtct-maternal-cohort-query-name: pmtct-maternal-cohort
  pmtct-maternal-cohort-query:  Select infant.state AS "State", infant.LGA AS "LGA", infant.Facility AS "Facility",
    infant.Personuuid AS "Patient ID", infant.Mothers_Hospital_Number AS "Mother''s Hospital Num",
    infant.Mothers_Date_of_Birth AS "Mother''s Date of Birth",
    infant.maritalstatus AS "Marital Status", infant.anc_setting_anc AS "ANC Setting ( Facility,Community)",
    infant.Date_of_Index_ANC_Registration AS "Date of Index ANC Registration",
    infant.LMP_Date AS "LMP Date", infant.Gestational_Age_Weeks_at_First_ANC_visit AS "Gestational Age (Weeks) @ First ANC visit",
    infant.gravida AS "Gravida", infant.parity AS "Parity", infant.entry_point AS "Point of entry",
    infant.hbstatus_delivery AS "Hepatitis B Test Result",infant.test_result_syphilis_anc AS "Syphillis Test Result",
    infant.Mother_dateConfirmedHivTest AS "Date tested for HIV", infant.hivstatus AS "HIV Test result",
    infant.art_start_time AS "Timing of ART initiation in mother",
    infant.art_start_date AS "Mother''s ART Start Date", infant.date_of_viral_load AS "Date of last Valid VL(If any)",
    infant.ga_of_viral_Load AS "GA at last visit??? (days)", infant.dateOfCurrentViralLoad,
    infant.currentViralLoad, infant.viralloadindication AS "VL Indication for last valid VL before  32 weeks GA",
    infant.expected_delivery_date AS "Expected Date of Delivery", infant.date_of_delivery AS "Date of Delivery (mm-dd-yyyy)",
    infant.infant_hospital_number AS "Child''s hospital ID number", infant.place_of_delivery AS "Place of Delivery",
    infant.mode_of_delivery AS "Mode of delivery", infant.child_status AS "Fetal outcome (Child status)", Infant.sex AS "Sex - Child",
    infant.body_weight AS "Birth Weight",
    infant.feeding_decision AS "Infant feeding Options",
    infant.test_type, infant.date_sample_collected, infant.date_sample_sent, infant.date_result_received_at_facility,
    infant.results, infant.infant_outcome_at18_months AS "Result (Child Final Outcome)"
    from (SELECT p.uuid AS PersonUuid, p.id, p.uuid,p.hospital_number as Mothers_Hospital_Number,
    INITCAP(p.surname) AS surname, INITCAP(p.first_name) as firstName, he.date_started AS hivEnrollmentDate,
    EXTRACT(YEAR from AGE(NOW(),  date_of_birth)) as Mother_age,
    p.other_name as otherName, p.sex as sex, p.date_of_birth as Mothers_Date_of_Birth,
    p.date_of_registration as dateOfRegistration, p.marital_status->>'display' as maritalStatus,
    education->>'display' as education, p.employment_status->>'display' as occupation,
    facility.name as Facility, facility_lga.name as LGA, facility_state.name as state,
    boui.code as datimId,
    pmtctenroll.lmp AS LMP_Date,
    pmtctenroll.entry_point,
    person_uuid_anc,
    anc.max_created_date_anc,
    anc.anc_setting_anc,
    anc.Date_of_Index_ANC_Registration,
    anc.Gestational_Age_Weeks_at_First_ANC_visit,
    anc.gravida,
    anc.parity,
    anc.tested_syphilis_anc,
    anc.test_result_syphilis_anc,
    anc.syphillisStatus AS Partner_syphilis_status,
    anc.acceptHivTest AS Partner_acceptHivTest,
    anc.referredTo AS Partner_syphilis_status,
    anc.age AS Partner_age,
    delivery.hbstatus_delivery,
    delivery.hcstatus_delivery,
    delivery.date_of_delivery,
    delivery.mode_of_delivery,
    delivery.maternal_outcome,
    delivery.child_status,
    delivery.number_of_infants_alive,
    delivery.number_of_infants_dead,
    delivery.delivery_time,
    delivery.feeding_decision,
    delivery.child_given_arv_with72,
    delivery.hiv_exposed_infant_given_hb_with24hrs,
    VlResult.dateOfCurrentViralLoad,
    VlResult.currentViralLoad,
    VlResult.viralLoadIndication,
    mother_visitation.ga_of_viral_load,
    mother_visitation.date_of_viral_load,
    pii.hospital_number,
    pii.infant_sex,
    pii.body_weight,
    piv.ctx_status,
    pip.age_at_test,
    pip.test_type,
    pip.date_sample_collected,
    pip.date_sample_sent,
    pip.date_result_received_at_facility,
    pip.date_result_received_by_caregiver,
    pip.results,
    pii.infant_outcome_at18_months,
    anc.Mother_dateConfirmedHivTest AS Mother_dateConfirmedHivTest,
    anc.hivstatus AS hivstatus,
    pmtctenroll.art_start_time,
    pmtctenroll.art_start_date,
    anc.expected_delivery_date,
    pia.infant_hospital_number,
    delivery.place_of_delivery
    FROM patient_person p
    INNER JOIN (
    SELECT * FROM (SELECT p.id, CONCAT(CAST(address_object->>'city' AS VARCHAR), ' ', REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CAST(address_object->>'line' AS text), '\\\\\\\\', ''), ']', ''), '[', ''), 'null',''), '\\\\\\\', '')) AS address,
    CASE WHEN address_object->>'stateId'  ~ '^\\\\d+(\\\\.\\\\d+)?$' THEN address_object->>'stateId' ELSE null END  AS stateId,
    CASE WHEN address_object->>'district'  ~ '^\\\\d+(\\\\.\\\\d+)?$' THEN address_object->>'district' ELSE null END  AS lgaId
    FROM patient_person p,
    jsonb_array_elements(p.address-> 'address') with ordinality l(address_object)) as result
    ) r ON r.id=p.id
    LEFT JOIN (
    SELECT mother_person_uuid AS mother_person_uuid,
    body_weight AS body_weight,
    hospital_number AS hospital_number,
    sex AS infant_sex,
    infant_outcome_at18_months AS infant_outcome_at18_months,
    MAX(created_date) AS max_created_date_pii
    FROM pmtct_infant_information
    GROUP BY mother_person_uuid, body_weight, hospital_number, infant_sex, infant_outcome_at18_months
    ) AS pii ON p.uuid = pii.mother_person_uuid
    LEFT JOIN (
    SELECT mother_person_uuid AS mother_person_uuid,
    ctx_status AS ctx_status,
    MAX(visit_date) AS max_created_date_piv
    FROM pmtct_infant_visit
    GROUP BY mother_person_uuid, ctx_status
    ) AS piv ON p.uuid = piv.mother_person_uuid
    LEFT JOIN (
    SELECT uuid AS uuid,
    infant_hospital_number AS infant_hospital_number,
    MAX(visit_date) AS max_created_date_piv
    FROM pmtct_infant_arv
    GROUP BY uuid, infant_hospital_number
    ) AS pia ON p.uuid = pia.uuid
    LEFT JOIN (
    SELECT uuid AS uuid,
    test_type AS test_type,
    age_at_test AS age_at_test,
    date_sample_collected AS date_sample_collected,
    date_sample_sent AS date_sample_sent,
    date_result_received_at_facility AS date_result_received_at_facility,
    date_result_received_by_caregiver AS date_result_received_by_caregiver,
    results AS results,
    MAX(visit_date) AS max_created_date_pip
    FROM pmtct_infant_pcr
    GROUP BY uuid, test_type, age_at_test, date_sample_collected, date_sample_sent, date_result_received_at_facility, date_result_received_by_caregiver, results
    ) AS pip ON p.uuid = pip.uuid
    LEFT JOIN (
    SELECT person_uuid AS person_uuid_anc,
    anc_setting AS anc_setting_anc,
    first_anc_date AS Date_of_Index_ANC_Registration,
    gaweeks AS Gestational_Age_Weeks_at_First_ANC_visit,
    gravida AS gravida,
    parity As parity,
    tested_syphilis AS tested_syphilis_anc,
    test_result_syphilis AS test_result_syphilis_anc,
    partner_information->>'age' AS age,
    partner_information->>'syphillisStatus' AS syphillisStatus,
    partner_information->>'acceptHivTest' AS acceptHivTest,
    partner_information->>'referredTo' AS referredTo,
    partner_information->>'hivStatus' AS hivStatus,
    partner_information->>'dateConfirmedHivTest' AS Mother_dateConfirmedHivTest,
    expected_delivery_date AS expected_delivery_date,
    MAX(created_date) AS max_created_date_anc
    FROM pmtct_anc
    GROUP BY person_uuid, anc_setting, first_anc_date, gaweeks, gravida, parity, tested_syphilis, test_result_syphilis, partner_information,hivStatus,
    Mother_dateConfirmedHivTest, hivstatus, expected_delivery_date
    ) AS anc ON p.uuid = anc.person_uuid_anc
    LEFT JOIN (
    SELECT person_uuid AS person_uuid_mother_visitation,
    ga_of_viral_load AS ga_of_viral_Load,
    date_of_viral_load AS date_of_viral_load,
    MAX(date_of_visit) AS max_created_date_mother_visitation
    FROM pmtct_mother_visitation
    GROUP BY person_uuid, ga_of_viral_load, date_of_viral_load
    ) AS mother_visitation ON p.uuid = mother_visitation.person_uuid_mother_visitation
    LEFT JOIN (
    SELECT person_uuid AS person_uuid_delivery,
    hbstatus AS hbstatus_delivery,
    hcstatus AS hcstatus_delivery,
    date_of_delivery AS date_of_delivery,
    mode_of_delivery AS mode_of_delivery,
    maternal_outcome AS maternal_outcome,
    child_status AS child_status,
    number_of_infants_alive AS number_of_infants_alive,
    number_of_infants_dead AS number_of_infants_dead,
    delivery_time AS delivery_time,
    feeding_decision AS feeding_decision,
    child_given_arv_within72 AS child_given_arv_with72,
    hiv_exposed_infant_given_hb_within24hrs AS hiv_exposed_infant_given_hb_with24hrs,
    place_of_delivery AS place_of_delivery,
    MAX(created_date) AS max_created_date_delivery
    FROM pmtct_delivery
    GROUP BY person_uuid, hbstatus, hcstatus, date_of_delivery, mode_of_delivery, maternal_outcome, child_status, number_of_infants_alive, number_of_infants_dead, delivery_time, feeding_decision, child_given_arv_with72, hiv_exposed_infant_given_hb_with24hrs,
    place_of_delivery
    ) AS delivery ON p.uuid = delivery.person_uuid_delivery
    LEFT JOIN pmtct_delivery panc ON p.uuid = panc.person_uuid AND panc.created_date = delivery.max_created_date_delivery
    LEFT JOIN base_organisation_unit facility ON facility.id=p.facility_id
    LEFT JOIN base_organisation_unit facility_lga ON facility_lga.id=facility.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit facility_state ON facility_state.id=facility_lga.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit res_state ON res_state.id=CAST(r.stateid AS BIGINT)
    LEFT JOIN base_organisation_unit res_lga ON res_lga.id=CAST(r.lgaid AS BIGINT)
    LEFT JOIN base_organisation_unit_identifier boui ON boui.organisation_unit_id=p.facility_id AND boui.name='DATIM_ID'
    INNER JOIN pmtct_enrollment pmtctenroll ON pmtctenroll.person_uuid = p.uuid
    LEFT JOIN (SELECT * FROM
    (SELECT CAST(ls.date_sample_collected AS DATE ) AS dateOfCurrentViralLoadSample,
    sm.patient_uuid AS person_uuid130 ,
    sm.facility_id AS vlFacility,
    sm.archived AS vlArchived,
    acode.display AS viralLoadIndication,
    sm.result_reported AS currentViralLoad,
    CAST(sm.date_result_reported AS DATE) AS dateOfCurrentViralLoad,
    ROW_NUMBER () OVER (PARTITION BY sm.patient_uuid ORDER BY date_result_reported DESC) AS rank2
    FROM public.laboratory_result  sm
    INNER JOIN public.laboratory_test  lt on sm.test_id = lt.id
    INNER JOIN public.laboratory_sample ls on ls.test_id = lt.id
    INNER JOIN public.base_application_codeset  acode on acode.id =  lt.viral_load_indication
    WHERE lt.lab_test_id = 16
    AND  lt.viral_load_indication !=719
    AND sm. date_result_reported IS NOT NULL
    AND sm.date_result_reported <= '12-02-2024'
    AND sm.result_reported IS NOT NULL
    ) AS vl_result
    WHERE vl_result.rank2 = 1
    AND (vl_result.vlArchived = 0 OR vl_result.vlArchived IS null)
    ) AS VlResult ON p.uuid  =  VlResult.person_uuid130
    LEFT JOIN hiv_enrollment he ON he.person_uuid = p.uuid
    WHERE p.archived=0 and p.sex='Female'
    AND p.facility_id=%d AND p.date_of_registration
    BETWEEN CAST('%s' AS DATE) AND CAST('%s' AS DATE)
    )as infant
  prep-query-name: prep
  prep-query: SELECT prep.datimid AS "Facility Id (Datim)",
    prep.state AS "State", prep.lga AS "LGA", prep.facilityname AS "Facility Name",
    prep.personuuid AS "Patient Identifier", prep.hospitalNumber AS "Hospital Number",
    prep.firstname AS "First Name", prep.surname AS "Surname", prep.othername AS "Other Names",
    prep.sex AS "Sex",prep.targetgroup AS "Target Group", prep.age AS "Age", prep.dateofbirth AS "Date Of Birth (yyyy-mm-dd)",
    prep.phone AS "Phone Number", prep.maritalstatus AS "Marital Status", prep.address AS "Client Address",
    prep.residentiallga AS "LGA of Residence", prep.residentialstate AS "State Of Residence",
    prep.education AS "Education", prep.occupation AS "Occupation",
    prep.dateofregistration AS "Date Of Registration (yyyy-mm-dd)", prep.prepcommencementdate AS "Date Of Commencement (yyyy-mm-dd)",
    prep.baselineregimen AS "Baseline Regimen", prep.prepType AS "Prep Type", prep.prepdistributionsetting AS "Prep Distribution Setting",
    prep.baselinesystolicbp AS "Baseline Systolic bp", prep.baselinediastolicbp AS "Baseline Diastolic bp", prep.baselineweight AS "Baseline Weight (kg)",
    prep.baselineheight AS "Baseline Height (cm)", prep.baseLinecreatinine AS "Baseline Creatinine", prep.baselinehepatitisb AS "Baseline Hepatitis B",
    prep.baselinehepatitisc AS "Baseline Hepatitis C", prep.hivstatusatprepinitiation AS "HIV status at PrEP Initiation",
    prep.baselineurinalysis AS "Baseline Urinalysis", prep.baselineurinalysisdate AS "Baseline Urinalysis Date",
    prep.indicationforprep AS "Indication for PrEP", prep.currentregimen AS "Current Regimen", prep.DateOfLastPickup AS "Date Of Last Pickup (yyyy-mm-dd)",
    prep.CurrentStatus AS "Current Status", prep.DateOfCurrentStatus AS "Date Of Current Status (yyyy-mm-dd)", prep.currentSystolicBP AS "Current Systolic bp",
    prep.currentDiastolicBP AS "Current Diastolic bp", prep.currentWeight AS "Current Weight (kg)", prep.currentHeight AS "Current Height (cm)",
    prep.currentHivStatus AS "Current HIV Status", prep.DateOfCurrentHIVStatus AS "Date of Current HIV Status (yyyy-mm-dd)",
    prep.currentUrinalysis AS "Current Urinalysis", prep.currentUrinalysisDate AS "Date of Current Urinalysis",
    prep.pregnancyStatus AS "Pregnancy Status", prep.InterruptionReason AS "Reasons for discontinuation/Stopped",
    prep.InterruptionDate AS "Date of Discontinuation/Stopped", prep.hivEnrollmentDate AS "Date Of HIV Enrollment (yyyy-mm-dd)"
    FROM (
    SELECT DISTINCT ON (p.uuid)p.uuid AS PersonUuid, p.id, p.uuid,p.hospital_number as hospitalNumber,
    INITCAP(p.surname) AS surname, INITCAP(p.first_name) as firstName,
    CASE WHEN eli_hiv_result ILIKE '%neg%' THEN NULL ELSE he.date_started END AS hivEnrollmentDate,
    EXTRACT(YEAR from AGE(NOW(),  date_of_birth)) as age,
    p.other_name as otherName, p.sex as sex, p.date_of_birth as dateOfBirth,
    p.date_of_registration as dateOfRegistration, p.marital_status->>'display' as maritalStatus,
    education->>'display' as education, p.employment_status->>'display' as occupation,
    facility.name as facilityName, facility_lga.name as lga, facility_state.name as state,
    boui.code as datimId, (SELECT name FROM base_organisation_unit WHERE id = CAST(NULLIF(p.address->'address'->0 ->'stateId' ->> 0,'') AS BIGINT)) as residentialState, (SELECT name FROM base_organisation_unit WHERE id = CAST(NULLIF(p.address->'address'->0 ->'district' ->> 0,'') AS BIGINT)) as residentialLga,
    r.address as address, (CASE WHEN contact_point->'contactPoint'->0->>'type'='phone' THEN contact_point->'contactPoint'->0->>'value' ELSE null END) AS phone,
    baseline_reg.regimen AS baselineRegimen,
    (select display from base_application_codeset where code = baseline_reg.prep_type) as prepType,
    (select display from base_application_codeset where code = baseline_pc.prep_distribution_setting) AS prepDistributionSetting,
    baseline_pc.systolic AS baselineSystolicBP,
    baseline_pc.diastolic AS baselineDiastolicBP,
    baseline_pc.weight AS baselineWeight,
    baseline_pc.height AS baselineHeight,
    (CASE WHEN tg.display IS NULL THEN null ELSE tg.display END) AS targetGroup,
    baseline_pc.encounter_date AS prepCommencementDate,
    baseline_pc.urinalysis->>'result' AS baseLineUrinalysis,
    CAST(baseline_pc.urinalysis->>'testDate' AS DATE) AS baseLineUrinalysisDate,
    (CASE WHEN baseline_creatinine.other_tests_done->>'name'='Creatinine'
    THEN baseline_creatinine.other_tests_done->>'result' ELSE NULL END) AS baseLineCreatinine,
    (CASE WHEN baseline_creatinine.other_tests_done->>'name'='Creatinine'
    THEN baseline_creatinine.other_tests_done->>'testDate' ELSE NULL END) AS baseLineCreatinineTestDate,
    (CASE WHEN baseline_pc.hepatitis->>'result' LIKE 'Hepatitis B%'
    THEN baseline_pc.hepatitis->>'result' ELSE NULL END) AS baseLineHepatitisB,
    (CASE WHEN baseline_pc.hepatitis->>'result' LIKE 'Hepatitis C%'
    THEN baseline_pc.hepatitis->>'result' ELSE NULL END) AS baseLineHepatitisC,
    current_pi.reason_stopped AS InterruptionReason,
    current_pi.interruption_date AS InterruptionDate,
    (CASE WHEN baseline_hiv_status.display IS NULL AND base_eli_test.base_eli_hiv_result IS NOT NULL
    THEN base_eli_test.base_eli_hiv_result ELSE
    REPLACE(baseline_hiv_status.display, 'HIV ', '') END) AS HIVStatusAtPrEPInitiation,
    (CASE WHEN prepe.extra->'prep'->>'onDemandIndication' IS NOT NULL THEN prepe.extra->>'onDemandIndication'
    WHEN riskt.display IS NOT NULL THEN riskt.display ELSE NULL END) AS indicationForPrEP,
    current_reg.regimen AS currentRegimen,
    current_pc.encounter_date AS DateOfLastPickup,
    current_pc.systolic AS currentSystolicBP,
    current_pc.diastolic AS currentDiastolicBP,
    current_pc.weight AS currentWeight,
    current_pc.height AS currentHeight,
    current_pc.urinalysis->>'result' AS currentUrinalysis,
    CAST(current_pc.urinalysis->>'testDate' AS DATE) AS currentUrinalysisDate,
    (CASE WHEN current_hiv_status.display IS NULL AND eli_hiv_result IS NOT NULL THEN eli_hiv_result
    WHEN current_hiv_status.display IS NOT NULL THEN REPLACE(current_hiv_status.display, 'HIV ', '')
    WHEN he.date_started IS NOT NULL THEN 'Positive' ELSE NULL
    END) AS currentHivStatus,
    current_pc.encounter_date AS DateOfCurrentHIVStatus,
    (CASE WHEN p.sex='Male' THEN NULL
    WHEN current_pc.pregnant IS NOT NULL AND current_pc.pregnant='true' THEN (SELECT display FROM base_application_codeset WHERE code = current_pc.pregnant)
    ELSE 'Not Pregnant' END) AS pregnancyStatus,
    (CASE
    WHEN prepi.interruption_date  > prepc.encounter_date THEN bac.display
    WHEN prepc.status IS NOT NULL THEN prepc.status
    ELSE NULL END) AS CurrentStatus,
    (CASE
    WHEN prepi.interruption_date  > prepc.encounter_date THEN prepi.interruption_date
    WHEN prepc.status IS NOT NULL THEN prepc.encounter_date
    ELSE NULL END) AS DateOfCurrentStatus
    FROM patient_person p
    INNER JOIN (
    SELECT * FROM (SELECT p.id, CONCAT(CAST(address_object->>'city' AS VARCHAR), ' ', REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CAST(address_object->>'line' AS text), '\\\\\\\\', ''), ']', ''), '[', ''), 'null',''), '\\\\\\\', '')) AS address,
    CASE WHEN address_object->>'stateId'  ~ '^\\\\d(\\\\.\\\\d)?$' THEN address_object->>'stateId' ELSE null END  AS stateId,
    CASE WHEN address_object->>'district'  ~ '^\\\\d(\\\\.\\\\d)?$' THEN address_object->>'district' ELSE null END  AS lgaId
    FROM patient_person p,
    jsonb_array_elements(p.address-> 'address') with ordinality l(address_object)) as result
    ) r ON r.id=p.id
    LEFT JOIN (SELECT target_group, person_uuid  FROM hts_client) penrol ON penrol.person_uuid=p.uuid
    LEFT JOIN (SELECT MAX(visit_date) max_date, person_uuid,target_group AS eli_target  FROM prep_eligibility
    GROUP BY person_uuid,target_group) e_target ON e_target.person_uuid=p.uuid
    LEFT JOIN (SELECT pe.drug_use_history->>'hivTestResultAtvisit' AS eli_hiv_result, max.visit_date, max.person_uuid FROM prep_eligibility pe
    INNER JOIN (SELECT DISTINCT MAX(visit_date)visit_date, person_uuid FROM prep_eligibility
    GROUP BY person_uuid)max ON max.visit_date=pe.visit_date
    AND max.person_uuid=pe.person_uuid)eli_test ON eli_test.person_uuid=p.uuid
    LEFT JOIN (SELECT pe.drug_use_history->>'hivTestResultAtvisit' AS base_eli_hiv_result, min.visit_date, min.person_uuid
    FROM prep_eligibility pe
    INNER JOIN (SELECT DISTINCT MIN(visit_date)visit_date, person_uuid FROM prep_eligibility
    GROUP BY person_uuid)min ON min.visit_date=pe.visit_date
    AND min.person_uuid=pe.person_uuid)base_eli_test ON base_eli_test.person_uuid=p.uuid
    LEFT JOIN base_organisation_unit facility ON facility.id=facility_id
    LEFT JOIN base_organisation_unit facility_lga ON facility_lga.id=facility.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit facility_state ON facility_state.id=facility_lga.parent_organisation_unit_id
    LEFT JOIN base_organisation_unit res_state ON res_state.id=CAST(r.stateid AS BIGINT)
    LEFT JOIN base_organisation_unit res_lga ON res_lga.id=CAST(r.lgaid AS BIGINT)
    LEFT JOIN base_organisation_unit_identifier boui ON boui.organisation_unit_id=facility_id AND boui.name='DATIM_ID'
    INNER JOIN prep_enrollment prepe ON prepe.person_uuid = p.uuid
    LEFT JOIN base_application_codeset riskt ON riskt.code = prepe.risk_type
    LEFT JOIN base_application_codeset tg ON tg.code = penrol.target_group
    LEFT JOIN base_application_codeset etg ON etg.code = e_target.eli_target
    LEFT JOIN (SELECT DISTINCT pc.* FROM prep_clinic pc
    INNER JOIN (SELECT DISTINCT MAX(encounter_date)encounter_date, person_uuid FROM prep_clinic
    GROUP BY person_uuid)max ON max.encounter_date=pc.encounter_date
    AND max.person_uuid=pc.person_uuid WHERE date_prep_start IS NULL)current_pc ON current_pc.person_uuid=p.uuid
    LEFT JOIN (SELECT DISTINCT pi.* FROM prep_interruption pi
    LEFT JOIN (SELECT DISTINCT MAX(encounter_date)encounter_date, person_uuid FROM prep_interruption
    GROUP BY person_uuid)max ON max.encounter_date=pi.encounter_date
    AND max.person_uuid=pi.person_uuid)current_pi ON current_pi.person_uuid=p.uuid
    LEFT JOIN prep_regimen current_reg ON current_reg.id = current_pc.regimen_id
    LEFT JOIN base_application_codeset current_hiv_status ON current_hiv_status.code = current_pc.hiv_test_result
    LEFT JOIN (SELECT pc.* FROM prep_clinic pc
    INNER JOIN (SELECT DISTINCT MIN(encounter_date)encounter_date, person_uuid FROM prep_clinic
    GROUP BY person_uuid)min ON min.encounter_date=pc.encounter_date
    AND min.person_uuid=pc.person_uuid WHERE date_prep_start IS NOT NULL)baseline_pc ON baseline_pc.person_uuid=p.uuid
    LEFT JOIN (SELECT pc.* FROM prep_clinic pc
    INNER JOIN (SELECT DISTINCT MIN(encounter_date)encounter_date, person_uuid FROM prep_clinic
    GROUP BY person_uuid)min ON min.person_uuid=pc.person_uuid
    WHERE pc.other_tests_done->>'name' = 'Creatinine' )baseline_creatinine ON baseline_creatinine.person_uuid=p.uuid
    LEFT JOIN prep_regimen baseline_reg ON baseline_reg.id = baseline_pc.regimen_id
    LEFT JOIN base_application_codeset baseline_hiv_status ON baseline_hiv_status.code=baseline_pc.hiv_test_result
    LEFT JOIN hiv_enrollment he ON he.person_uuid = p.uuid
    LEFT JOIN (
    SELECT pi.id, pi.person_uuid, pi.interruption_date , pi.interruption_type
    FROM prep_interruption pi
    INNER JOIN (SELECT DISTINCT pi.person_uuid, MAX(pi.interruption_date)interruption_date
    FROM prep_interruption pi WHERE pi.archived=0
    GROUP BY pi.person_uuid)pit ON pit.interruption_date=pi.interruption_date
    AND pit.person_uuid=pi.person_uuid
    WHERE pi.archived=0
    GROUP BY pi.id, pi.person_uuid, pi.interruption_date, pi.interruption_type )prepi ON prepi.person_uuid=p.uuid
    LEFT JOIN (SELECT pc.person_uuid, MAX(pc.encounter_date) as encounter_date, pc.duration,
    (CASE WHEN (pc.encounter_date  + pc.duration) > CAST (NOW() AS DATE) THEN 'Active'
    ELSE  'Defaulted' END) status FROM prep_clinic pc
    INNER JOIN (SELECT DISTINCT MAX(pc.encounter_date) encounter_date, pc.person_uuid
    FROM prep_clinic pc GROUP BY pc.person_uuid) max_p ON max_p.encounter_date=pc.encounter_date
    AND max_p.person_uuid=pc.person_uuid
    WHERE pc.archived=0
    GROUP BY pc.person_uuid, pc.duration, status)prepc ON prepc.person_uuid=p.uuid
    LEFT JOIN base_application_codeset bac ON bac.code=prepi.interruption_type
    WHERE p.archived=0 AND p.facility_id=?1
    AND p.date_of_registration BETWEEN CAST('?2' AS DATE) AND CAST('?3' AS DATE)
    ) prep